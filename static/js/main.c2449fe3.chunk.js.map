{"version":3,"sources":["style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","views/Nft/components/NftGlobalNotification.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts","config/constants/nfts.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","components/Menu/getPrice.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","contexts/BlockContext.tsx","config/constants/types.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/contracts.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts"],"names":["GlobalStyle","createGlobalStyle","theme","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","React","createContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","process","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","children","useState","translations","setTranslations","useEffect","storedLangCode","localStorage","getItem","storedLang","filter","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","data","length","catch","e","error","Provider","value","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","useContext","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","account","connect","reset","cakePriceUsd","usePriceCakeBusd","login","logout","currentLang","langs","setLang","toNumber","links","priceLink","ModalContent","styled","div","Actions","NftYouWonModal","onDismiss","TranslateString","useI18n","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","useRef","checkNftStatus","a","multicall","rabbitmintingfarm","address","RABBIT_MINTING_FARM_ADDRESS","name","params","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","includes","Home","lazy","Farms","NotFound","Vaults","Bones","BigNumber","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","Global","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farms","farmsReducer","pools","poolsReducer","Providers","rpcUrl","getRpcUrl","chainId","store","connectors","walletconnect","bsc","BlockContext","RefreshContext","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","contractOptions","eth","Contract","defaultTranslationState","TranslationsContext","PANCAKE_RABBITS_ADDRESS","fetchFarms","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","tokenAddresses","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","useGetPriceData","setData","response","res","binancecoin","usd","fetchData","ZERO","useDispatch","slowRefresh","useRefresh","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","usePriceBnbBusd","priceData","useTotalValue","bnbPrice","cakePrice","i","val","BNB","CAKE","plus","nodes","getNodeUrl","randomIndex","random","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","variableRegex","getTranslation","translationId","foundTranslation","translation","stringId","translatedString","text","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","BlockContextProvider","previousBlock","block","setBlock","web3","getBlockNumber","blockNumber","PoolCategory","multi","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","decodeFunctionResult","getCakeAddress","addresses","cake","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","busd","sousId","tokenName","stakingTokenName","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","fee","COMMUNITY","nonBnbPools","poolsConfig","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts"],"mappings":"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","file":"static/js/main.c2449fe3.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  // ZHCN,\r\n  // ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://dex.astroprotocol.com/',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://dex.astroprotocol.com/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  {\r\n    label: 'Vaults',\r\n    icon: 'SunIcon',\r\n    href: '/vaults',\r\n  },\r\n  {\r\n    label: 'Lottery',\r\n    icon: 'TicketIcon',\r\n    href: '/lottery',\r\n  },\r\n  // {\r\n  //   label: 'NFT',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/nft',\r\n  // },\r\n  // {\r\n  //   label: 'Info',\r\n  //   icon: 'InfoIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: 'Overview',\r\n  //       href: 'https://pancakeswap.info',\r\n  //     },\r\n  //     {\r\n  //       label: 'Tokens',\r\n  //       href: 'https://pancakeswap.info/tokens',\r\n  //     },\r\n  //     {\r\n  //       label: 'Pairs',\r\n  //       href: 'https://pancakeswap.info/pairs',\r\n  //     },\r\n  //     {\r\n  //       label: 'Accounts',\r\n  //       href: 'https://pancakeswap.info/accounts',\r\n  //     },\r\n  //   ],\r\n  // },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'Docs',\r\n        href: 'https://docs.astroprotocol.com/',\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://poocoin.app/tokens/0x9fe424c2b6047b86b237ba00f656d5e268246ca2\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\nconst Vaults = lazy(() => import('./views/Pools'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Bones = lazy(() => import('./views/Bones'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<> </>}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n\t\t\t<Route path=\"/vaults\">\r\n              <Vaults />\r\n            </Route>\r\n            {/* <Route path=\"/nft\"> */}\r\n\t\t\t{/*  <Nft /> */}\r\n\t\t\t{/* </Route> */}\r\n\t\t\t{/* <Route path=\"/lottery\"> */}\r\n\t\t\t{/*  <Lottery /> */}\r\n\t\t\t{/* </Route> */}\r\n            <Route path=\"/bones\">\r\n              <Bones />\r\n            </Route>\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: '{/* github upload url here */} ',\r\n    previewImage: '1.png',\r\n    blurImage: '1.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '2.png',\r\n    blurImage: '2.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '3.png',\r\n    blurImage: '3.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '4.png',\r\n    blurImage: '4.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '5.png',\r\n    blurImage: '5.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '6.png',\r\n    blurImage: '6.png',\r\n    sortOrder: 999,\r\n    bunnyId: 5,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if(farmConfig.isTokenOnly){\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'eggPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingEgg',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import { useEffect, useState } from 'react'\r\n\r\ntype ApiResponse = {\r\n  prices: {\r\n    [key: string]: string\r\n  }\r\n}\r\n\r\n/**\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nconst api = 'https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd'\r\n\r\nconst useGetPriceData = () => {\r\n  const [data, setData] = useState<ApiResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(api)\r\n        // get bnb price    \r\n        const res: ApiResponse = await response.json()      /// => res.binancecoin.usd\r\n        // @ts-ignore\r\n        setData(res.binancecoin.usd)\r\n      } catch (error) {\r\n        console.error('Unable to fetch price data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n\r\nexport default useGetPriceData\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\nimport useGetPriceData from '../components/Menu/getPrice'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  // const pid = 2 // BUSD-BNB LP\r\n  const pid = 0;\r\n  const farm = useFarmFromPid(pid)\r\n    // @ts-ignore  \r\n    const priceData = useGetPriceData()\r\n\r\n     // @ts-ignore  \r\n    const priceData2 = new BigNumber(priceData)\r\n\r\n    const priceData3 = priceData2.times(1)\r\n\r\n    return priceData3\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  const pid = 0;\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n\r\n  let priceData = useGetPriceData()\r\n\r\n  // @ts-ignore  \r\n  priceData = new BigNumber(priceData)\r\n\r\n  const farm = useFarmFromPid(pid)\r\n  // localStorage.setItem('poolTp', priceData.times(farm.tokenPriceVsQuote).toString());\r\n  //  @ts-ignore\r\n  return farm.tokenPriceVsQuote ? priceData.times(farm.tokenPriceVsQuote) : ZERO\r\n  \r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n  maxContribution: string\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'ASTRO',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n  fee: string\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0xaa2f8F20A93Cc4b3895336C9E5d4ecEc9DE48599',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '0x8dDaC6F80064f14e2a3D06225F626A9fb1D7a4e1',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '0x7f9edEDc89F524EDCFDaf4Eea103cB99AA3a7312',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  {\r\n    sousId: 884,\r\n    tokenName: 'LAIKA',\r\n    stakingTokenName: QuoteToken.CAKE,\r\n    stakingTokenAddress: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x22365aA3b81e52bcc696D7979eb78186e92F745B',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://laikaprotocol.com',\r\n    harvest: true,\r\n    tokenPerBlock: '1000',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n    tokenDecimals: 9, // this is the reward token decimals\r\n    fee: \"0%\"\r\n  },\r\n  {\r\n    sousId: 883,\r\n    tokenName: 'BUBBLEGUM',\r\n    stakingTokenName: QuoteToken.CAKE,\r\n    stakingTokenAddress: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc77D1911072865eCf4c5c5b1f9e6402009d903Ba',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    projectLink: 'https://bubblegum.life/',\r\n    harvest: true,\r\n    tokenPerBlock: '2',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n    tokenDecimals: 9,\r\n    fee: \"0%\"\r\n  },\r\n//  {\r\n//    sousId: 882,\r\n//    tokenName: 'HUB',\r\n//    stakingTokenName: QuoteToken.CAKE,\r\n//    stakingTokenAddress: '0x570919a72db73799191fc734b6D600750C0Dc18C',\r\n//    contractAddress: {\r\n//      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n//      56: '0x5c81A775fe34994Ff574269de829Fb861B3a5eE8',\r\n//    },\r\n//    poolCategory: PoolCategory.CORE,\r\n//    projectLink: 'https://tokenhub.finance/',\r\n//    harvest: true,\r\n//    tokenPerBlock: '0.3472',\r\n//    sortOrder: 999,\r\n//    isFinished: false,\r\n//    tokenDecimals: 18,\r\n//    fee: \"0.5%\"\r\n//  },\r\n]\r\n\r\nexport default pools\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'PCS ASTRO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x02178439e5D2864e93bbBE6aC9f9d8F325b17d77',\r\n    },\r\n    tokenSymbol: 'ASTRO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ASTRO',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x02178439e5D2864e93bbBE6aC9f9d8F325b17d77', // astro - bnb lp\r\n    },\r\n    tokenSymbol: 'ASTRO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 5,\r\n    risk: 5,\r\n    lpSymbol: 'PCS ASTRO-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8d7c9f9354B6bc252F54d02FEb69383C65028A77',\r\n    },\r\n    tokenSymbol: 'ASTRO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x9Fe424c2B6047b86B237bA00f656d5e268246CA2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 5,\r\n    lpSymbol: 'PCS LAIKA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa2881389D523B26cdAd546BfAfB0ae09DA253405', // token - busd lp\r\n    },\r\n    tokenSymbol: 'LAIKA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2a49de60cc6204c3afc3e770fdb30a0554147519',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 4,\r\n    risk: 5,\r\n    lpSymbol: 'PCS LAIKA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4Bf8782E914376bf27BB8B6006B92b90B99278A3', // token - busd lp\r\n    },\r\n    tokenSymbol: 'LAIKA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2a49de60cc6204c3afc3e770fdb30a0554147519',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 3,\r\n    lpSymbol: 'PCS BUBBLEGUM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xac645caa8feB3758a3f6E6fB6D629F427C53E744', // token - busd lp\r\n    },\r\n    tokenSymbol: 'BubbleGum',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x58BFc98F3974AeF4FED9A0168B97CcCD3512cB4A',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n \r\n\r\n  \r\n\r\n]\r\n\r\nexport default farms\r\n"],"sourceRoot":""}