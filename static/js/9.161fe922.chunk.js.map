{"version":3,"sources":["utils/callHelpers.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","components/UnlockButton.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","isUsingBnb","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","text","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","useSousStake","handleStake","updateUserStakedBalance","onStake","useStake","console","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useApprove","onApprove","useSousApprove","updateUserAllowance","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","useUnstake","Wrapper","ExpandableSectionButton","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","handleSelectMa2x","myBol","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","displayBalance","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","comparedTo","Page","textAlign","exact","responsive"],"mappings":"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","file":"static/js/9.161fe922.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { connect, reset } = useWallet()\r\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.text};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(10)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.text};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"text\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.input};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://dex.astroprotocol.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n          `https://dex.astroprotocol.com/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  const handleSelectMa2x = useCallback(() => {\r\n    // @ts-ignore\r\n    setVal(fullBalance*1000000000 )\r\n  }, [fullBalance, setVal])\r\n\r\n\r\n  let myBol = false;\r\n  switch(tokenName){\r\n    case \"$LORDZ\":\r\n      myBol = true;\r\n      break;\r\n    default:\r\n      myBol = false;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={myBol ? handleSelectMa2x : handleSelectMax}\r\n        onChange={handleChange}\r\n        // @ts-ignore\r\n        max={myBol ? fullBalance*1000000000 : fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            // @ts-ignore\r\n            await onConfirm(myBol ? val/1000000000 : val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  const handleSelectMa2x = useCallback(() => {\r\n    // @ts-ignore\r\n    setVal(fullBalance*1000000000 )\r\n  }, [fullBalance, setVal])\r\n\r\n  let myBol = false;\r\n  switch(tokenName){\r\n    case \"$LORDZ\":\r\n      myBol = true;\r\n      break;\r\n    default:\r\n      myBol = false;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={myBol ? handleSelectMa2x : handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        // @ts-ignore\r\n        max={myBol ? fullBalance*1000000000 : fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"primary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            // @ts-ignore\r\n            await onConfirm(myBol ? val/1000000000 : val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  let displayBalance;\r\n  if(pid === 8){\r\n    displayBalance = (rawStakedBalance*1000000000).toLocaleString()\r\n  } else {\r\n    displayBalance = rawStakedBalance.toLocaleString();\r\n  }\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"primary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"tertiary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"primary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"tertiary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          ASTRO\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ASTRO per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://dex.astroprotocol.com/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 12px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'ASTRO'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'ASTRO' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"primary\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n\r\n        \r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"white\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(321321321, 'Stake tokens to earn ASTRO')\r\n            :\r\n          TranslateString(321321321, 'Stake LP tokens to earn ASTRO')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"white\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(321321312, 'Deposit Fee will be used to maintain the ecosystem')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"/images/egg/8.svg\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}