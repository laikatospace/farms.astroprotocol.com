{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useBlock.ts","config/constants/bones.ts","views/Bones/components/InfoRow.tsx","views/Bones/components/Image.tsx","views/Bones/utils/contracts.ts","views/Bones/contexts/NftProvider.tsx","views/Bones/components/ClaimNftModal.tsx","views/Bones/components/BurnNftModal.tsx","views/Bones/components/TransferNftModal.tsx","views/Bones/components/NftCard/index.tsx","views/Bones/components/NftGrid.tsx","views/Bones/components/NftList.tsx","views/Bones/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useBlock","useContext","BlockContext","Bone","name","description","dexLink","infoLink","originalImage","previewImage","blurImage","sortOrder","bunnyId","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getPancakeRabbitContract","contractOptions","pancakeRabbitsAbi","pancakeRabbits","PANCAKE_RABBITS_ADDRESS","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","canClaim","hasClaimed","countBunniesBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","bunnyMap","state","setState","currentBlock","multicall","rabbitmintingfarm","address","RABBIT_MINTING_FARM_ADDRESS","startBlockNumberArr","endBlockNumberArr","countBunniesBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","fetchContractData","pancakeRabbitsContract","params","canClaimArr","hasClaimedArr","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","setError","TranslateString","useI18n","rabbitMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","bunnyCount","bunnyBurnCount","walletCanClaim","isSupplyAvailable","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","bones","map","StyledHero","textSubtle","Nft","Page","size"],"mappings":"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","file":"static/js/14.20bd93c4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useContext } from 'react'\r\nimport { BlockContext } from 'contexts/BlockContext'\r\n\r\nconst useBlock = () => {\r\n  const block: number = useContext(BlockContext)\r\n  return block\r\n}\r\n\r\nexport default useBlock\r\n","import { Bones } from './types'\r\n\r\nconst Bone: Bones[] = [\r\n  {\r\n    name: 'CakeBone',\r\n    description: \"Hold CakeBone, Earn Cake. Burnt LP, Renounced Contract, Fair / Stealth Launched, 50% locked forever to fuel the Laika and Astro Ecosystems.\",\r\n\tdexLink: 'https://exchange.astroprotocol.com/#/swap?outputCurrency=0x2a49De60cc6204c3AFC3e770FDB30A0554147519',\r\n\tinfoLink: 'https://docs.astroprotocol.com/',\r\n    originalImage: '{/* github upload url here */} ',\r\n    previewImage: '1.png',\r\n    blurImage: '1.png',\r\n    sortOrder: 1,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'BananaBone',\r\n    description: \"Hold BananaBone, Earn Banana. Burnt LP, Renounced Contract, Fair / Stealth Launched, 50% locked forever to fuel the Laika and Astro Ecosystems.\",\r\n\tdexLink: 'https://exchange.astroprotocol.com/#/swap?outputCurrency=0x2a49De60cc6204c3AFC3e770FDB30A0554147519',\r\n\tinfoLink: 'https://docs.astroprotocol.com/',\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '2.png',\r\n    blurImage: '2.png',\r\n    sortOrder: 2,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Coming Soon',\r\n    description: \"Coming Soon\",\r\n\tdexLink: 'https://exchange.astroprotocol.com/#/swap',\r\n\tinfoLink: 'https://docs.astroprotocol.com/',\r\n    originalImage: ' {/* github upload url here */} ',\r\n    previewImage: '3.png',\r\n    blurImage: '3.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n]\r\n\r\nexport default Bone\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import { AbiItem } from 'web3-utils'\r\nimport { getContract } from 'utils/web3'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS, PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\r\n\r\n// TODO: Figure out how to add current account to contracts to write methods can be used\r\n\r\nexport const getRabbitMintingContract = (contractOptions?: ContractOptions) => {\r\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\r\n  return getContract(rabbitMintingFarmAbi, RABBIT_MINTING_FARM_ADDRESS, contractOptions)\r\n}\r\n\r\nexport const getPancakeRabbitContract = (contractOptions?: ContractOptions) => {\r\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\r\n  return getContract(pancakeRabbitsAbi, PANCAKE_RABBITS_ADDRESS, contractOptions)\r\n}\r\n\r\nexport default getRabbitMintingContract\r\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\nimport { getPancakeRabbitContract } from '../utils/contracts'\r\n\r\ninterface NftProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\ntype BunnyMap = {\r\n  [key: number]: number[]\r\n}\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  canClaim: boolean\r\n  hasClaimed: boolean\r\n  countBunniesBurnt: number\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  totalSupplyDistributed: number\r\n  currentDistributedSupply: number\r\n  balanceOf: number\r\n  bunnyMap: BunnyMap\r\n}\r\n\r\ntype Context = {\r\n  canBurnNft: boolean\r\n  getTokenIds: (bunnyId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    canClaim: false,\r\n    hasClaimed: false,\r\n    countBunniesBurnt: 0,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    totalSupplyDistributed: 0,\r\n    currentDistributedSupply: 0,\r\n    balanceOf: 0,\r\n    bunnyMap: {},\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [\r\n          startBlockNumberArr,\r\n          endBlockNumberArr,\r\n          countBunniesBurntArr,\r\n          totalSupplyDistributedArr,\r\n          currentDistributedSupplyArr,\r\n        ] = await multicall(rabbitmintingfarm, [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'startBlockNumber' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'endBlockNumber' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'countBunniesBurnt' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n        const [countBunniesBurnt]: [BigNumber] = countBunniesBurntArr\r\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          countBunniesBurnt: countBunniesBurnt.toNumber(),\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\r\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const pancakeRabbitsContract = getPancakeRabbitContract()\r\n        const [canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ])\r\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\r\n        const [canClaim]: [boolean] = canClaimArr\r\n        const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n        let bunnyMap: BunnyMap = {}\r\n\r\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\r\n        // owned by the wallet, then the bunnyId's associated with the tokenIds\r\n        if (balanceOf > 0) {\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const tokenId = await pancakeRabbitsContract.methods.tokenOfOwnerByIndex(account, index).call()\r\n              const bunnyId = await pancakeRabbitsContract.methods.getBunnyId(tokenId).call()\r\n\r\n              return [parseInt(bunnyId, 10), parseInt(tokenId, 10)]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          // While improbable a wallet can own more than one of the same bunny so the format is:\r\n          // { [bunnyId]: [array of tokenIds] }\r\n          bunnyMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [bunnyId, tokenId] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [bunnyId]: accum[bunnyId] ? [...accum[bunnyId], tokenId] : [tokenId],\r\n            }\r\n          }, {})\r\n        }\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          canClaim,\r\n          hasClaimed,\r\n          balanceOf,\r\n          bunnyMap,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (bunnyId: number) => state.bunnyMap[bunnyId]\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      await rabbitMintingContract.methods\r\n        .mintNFT(nft.bunnyId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError('You must have a CAKE balance greater than zero to claim NFT')\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await rabbitMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>10 CAKE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pancakeRabbitsContract = usePancakeRabbits(PANCAKE_RABBITS_ADDRESS)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await pancakeRabbitsContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Bones } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getPancakeRabbitContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Bones\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'primary', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    bunnyCount: 0,\r\n    bunnyBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    canClaim,\r\n    hasClaimed,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n  } = useContext(NftProviderContext)\r\n  const walletCanClaim = canClaim && !hasClaimed\r\n  const { bunnyId, name, previewImage, originalImage, description, dexLink, infoLink } = nft\r\n  const tokenIds = getTokenIds(bunnyId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getPancakeRabbitContract()\r\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\r\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        bunnyCount: parseInt(bunnyCount, 10),\r\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [bunnyId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/bones/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\r\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && canBurnNft && walletOwnsNft && (\r\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\r\n            {TranslateString(999, 'Trade in for CAKE')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n\t\t\t\t<a href={dexLink}>\r\n\t\t\t  <Button fullWidth mt=\"24px\">\r\n\t\t\t\t{TranslateString(999, 'Purchase this token')}\r\n\t\t\t  </Button>\r\n\t\t\t   <a href={infoLink}>\r\n\t\t\t  <Button fullWidth mt=\"24px\">\r\n\t\t\t\t{TranslateString(999, 'Learn more')}\r\n\t\t\t  </Button>\r\n\t\t\t  </a>\r\n\t\t\t  </a>\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport bones from 'config/constants/bones'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = () => {\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(bones, 'sortOrder').map((nft) => (\r\n        <div key={nft.name}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\nimport NftInfo from './components/NftInfo'\r\nimport ForwardButton from './components/ForwardButton'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"text\" mb=\"24px\">\r\n            Bones\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"text\">\r\n            {TranslateString(999, 'Bones are secondary tokens that offer unique and complimentary tokenomics.')}\r\n\t\t\t<br/>\r\n\t\t\t{TranslateString(999, 'Passive investing in a safe manner.')}\r\n          </Heading>\r\n        </StyledHero>\r\n        <NftList />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}